<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!--  Spring MVC에서 애노테이션을 이용해 작성된 컨트롤러에서 애노테이션 기반의 설정을 사용하도록 합니다. 
	
		  <annotation-driven />은 Spring MVC 애플리케이션에서 애노테이션을 이용하여 자동으로 컨트롤러를 매핑하고 
		   유효성 검사, 포맷 변환 등의 기능을 제공하기 위해 사용되는 XML 태그입니다. 
		   이 태그를 사용하면 Spring MVC 애플리케이션에서 @RequestMapping, @RequestParam, @ResponseBody와 같은 
		   애노테이션을 사용하여 쉽게 HTTP 요청과 응답을 처리할 수 있습니다. 
		   이를 위해 Spring MVC는 애노테이션 처리기(annotation handler)를 등록하고, 
		  DefaultAnnotationHandlerMapping, 
		  AnnotationMethodHandlerAdapter와 같은 기본 컨트롤러를 자동으로 등록합니다. 
		   따라서, 이 태그를 사용하면 개발자가 일일이 XML 설정 파일에 등록하는 수고를 덜 수 있습니다.
	 -->
	<annotation-driven />

 
    <!-- 
    	요약 : /resource 폴더의 HTML, 자바스크립트, 제이쿼리, 이미지파일들을 읽어 들이기 위해 설정. 
    	
    	<resources> 태그는 Spring MVC에서 정적 리소스를 처리하기 위해 사용되는 XML 태그 중 하나입니다. 
    	mapping 속성은 요청 URL 패턴을 지정하고, location 속성은 실제 리소스가 위치한 디렉토리 경로를 지정합니다.

		코드에서 <resources mapping="/resources/**" location="/resources/" />는 
		"/resources/**" 패턴으로 들어오는 모든 요청을 /resources/ 디렉토리에서 처리하도록 설정합니다. 
		예를 들어, /resources/css/styles.css 요청은 /resources/css/styles.css 파일을 찾아 응답합니다. 
		이를 통해 개발자는 정적 리소스를 처리하기 위해 별도의 컨트롤러나 로직을 작성하지 않아도 됩니다.
     -->
	<resources mapping="/resources/**" location="/resources/" />
	
	
	<!-- 
		요약 : 이 코드는 Spring MVC의 Tiles framework를 구성하는 데 사용됩니다.

		id 속성은 이 bean의 고유 식별자입니다.
		class 속성은 TilesConfigurer 클래스를 사용하고 있으며, 
		Spring에서는 Tiles를 지원하는 다양한 ViewResolver 클래스가 있습니다.
		definitions 속성은 Tiles에 대한 설정 파일의 위치를 지정합니다. 
		classpath:tiles/*.xml로 설정되어 있으므로, tiles 폴더 안에 XML 파일들이 있어야 합니다.
		preparerFactoryClass 속성은 Tiles의 preparerFactory에 대한 클래스를 지정합니다. 
		이 속성은 선택 사항이며, Spring에서 기본값으로 제공하는 SpringBeanPreparerFactory를 사용합니다.
		즉, 이 코드는 Tiles를 사용하여 뷰를 생성하기 위한 설정을 담고 있습니다. 
		definitions 속성에서 지정된 XML 파일을 읽어들여 Tiles에서 사용되는 정의를 읽어들일 것입니다. 
		Tiles는 이러한 정의를 기반으로 뷰를 생성합니다.
	 -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="preparerFactoryClass" 
		               value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory"/>
	</beans:bean>
	
	
	<!-- 
		이 코드는 스프링 MVC의 UrlBasedViewResolver 클래스를 사용하여 TilesView 클래스를 뷰 리졸버로 설정하는데 사용됩니다.
		UrlBasedViewResolver 클래스는 뷰 이름을 기반으로 뷰 객체를 찾는 데 사용됩니다. 
		이 클래스는 뷰 이름의 접두어 및 접미사를 설정하고, 뷰 객체를 생성하기 위해 필요한 설정값들을 설정할 수 있습니다.
		여기서는 viewClass 속성을 사용하여 뷰 객체로 TilesView 클래스를 설정합니다. 
		TilesView 클래스는 Apache Tiles 프레임워크를 사용하여 뷰를 처리하며, 
		JSP, Freemarker, Velocity 등과 같은 다양한 뷰 템플릿 엔진과 호환됩니다. 
		이 클래스를 사용하여 뷰를 처리하면, tiles.xml 파일에서 정의한 타일(Tiles) 레이아웃을 사용하여 뷰를 구성할 수 있습니다.
	 -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/> 
	</beans:bean>
	
	
	
	
	<!-- 
		이 코드는 Spring MVC의 컨트롤러, 서비스, 리포지토리 등과 같은 컴포넌트들을 스캔하기 위해 사용됩니다. 
		<context:component-scan> 요소는 base-package 속성을 통해 스캔할 패키지의 이름을 지정하고, 
		해당 패키지와 하위 패키지에서 @Component 어노테이션이 지정된 클래스를 찾아서 스프링 빈으로 등록합니다. 
		이렇게 등록된 빈들은 DI(Dependency Injection)과 같은 스프링의 핵심 기능을 활용하여 객체 간의 의존성을 자동으로 연결할 수 있습니다. 
		이는 개발자가 수동으로 객체를 생성하고 의존성을 설정하는 번거로움을 덜어줍니다.
	 -->
	<context:component-scan base-package="com.bookshop01" />
	
	
	<!-- 
	요약 : 2단계와 3단계 요청 주소에 대해 인터셉터를 설정합니다.
	
	<mvc:interceptors>는 요청에 대한 인터셉터를 정의할 때 사용하는 태그입니다.
		<mvc:interceptor>는 <mvc:interceptors>의 하위 태그로서, 단일 인터셉터 빈을 정의합니다.
		<mvc:mapping>은 <mvc:interceptor>의 하위 태그로서, 인터셉터가 적용되어야 하는 URL 패턴을 지정합니다. 
		아래의 설정에서는 *.do로 끝나는 URL에 대해서 인터셉터를 적용합니다.
		com.bookshop01.common.interceptor.ViewNameInterceptor는 인터셉터 클래스의 경로를 지정합니다. 
		해당 인터셉터는 요청에 대한 처리 이후, 뷰 이름을 설정하기 위한 용도로 사용됩니다.
	 -->											
	<mvc:interceptors> 	
	  <mvc:interceptor> 
	    <mvc:mapping path="/*/*.do"/>  
	    <mvc:mapping path="/*/*/*.do"/>    
	    <beans:bean class="com.bookshop01.common.interceptor.ViewNameInterceptor" />
	  </mvc:interceptor>
 	</mvc:interceptors>
<!--  	 /goods/goodsDetail.do  상품 클릭시 상품상세화면 요청! -->
<!--     /cart/myCartList.do 장바구니 테이블에 저장된 상품 목록 조회 요청!  -->
 
 	<!-- 
 		요약 : 파일업로드 기능을 위한 멀티파트  뷰리졸버 설정 
 	
 		CommonsMultipartResolver는 Spring에서 제공하는 멀티파트 요청 처리를 위한 클래스입니다.
		maxUploadSize는 파일 업로드 용량의 최대 크기를 바이트 단위로 설정합니다.
		maxInMemorySize는 파일 업로드 시 메모리에 저장될 수 있는 최대 크기를 설정합니다.
		defaultEncoding은 멀티파트 요청 데이터의 기본 인코딩을 설정합니다. 아래 설정에서는 UTF-8로 설정되어 있습니다.
 	 -->
    <beans:bean id="multipartResolver"  
    		 class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
       <beans:property name="maxUploadSize" value="52428800" />
       <beans:property name="maxInMemorySize" value="52428800" />
       <beans:property name="defaultEncoding" value="utf-8" />
    </beans:bean>
	
 
</beans:beans>









